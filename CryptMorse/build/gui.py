
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

from encryption_methods import *
from decryption_methods import *
import pyperclip


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\User\OneDrive\Desktop\hard disk + onedrive\Spring 2024\Info sec\Infosec_proj\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1376x430")
window.configure(bg = "#FFFFFF")

'''
    plaintext = str(entry_2.get())
    ciphertext = str(entry_4.get())
    key_shift = str(entry_3.get())
'''
morse = ""

def encrypt_handler():
    global morse
    if c:
        shift = int(entry_3.get())
        if shift>26:
            shift = shift%26
        if shift<0:
            shift = shift%26
        
        plaintext = str(entry_2.get())
        ciphertext = caesar_encrypt(plaintext, shift)
        encrypted_text_morse = text_to_morse(ciphertext)
        play_morse_code(encrypted_text_morse)
        morse = encrypted_text_morse
        canvas.itemconfig(tagOrId=result, text=morse)
    
    elif v:
        key = str(entry_3.get())
        plaintext = str(entry_2.get())
        if len(key) == 0:
            while len(key)<len(plaintext):
                key += key
        if len(key) > len(plaintext):
            key = key[:len(plaintext)]
        if key.isnumeric():
            canvas.itemconfig(tagOrId=result, text="Invalid key")
            return
        else:
            ciphertext = vigenere_encrypt(plaintext, key)
            encrypted_text_morse = text_to_morse(ciphertext)
            play_morse_code(encrypted_text_morse)
            morse = encrypted_text_morse
            canvas.itemconfig(tagOrId=result, text=morse)

    elif d:
        key = str(entry_3.get())
        if len(key)!=8:
            canvas.itemconfig(tagOrId=result, text="Please insert an 8 character key")
            return
        else:
            plaintext = str(entry_2.get())
            ciphertext = des_encrypt(plaintext, key)
            encrypted_text_morse = text_to_morse(ciphertext)
            play_morse_code(encrypted_text_morse)
            morse = encrypted_text_morse
            canvas.itemconfig(tagOrId=result, text=morse)
    elif a:
        key = str(entry_3.get())
        if len(key)  != 16 and len(key) != 24 and len(key) != 32:
            canvas.itemconfig(tagOrId=result, text="Please insert a 16/24/32 character key")
            return
        else:
            plaintext = str(entry_2.get())
            ciphertext = aes_encrypt(plaintext, key)
            encrypted_text_morse = text_to_morse(ciphertext)
            play_morse_code(encrypted_text_morse)
            morse = encrypted_text_morse
            canvas.itemconfig(tagOrId=result, text=morse)

def decrypt_handler():
    if c:
        
        shift = int(entry_3.get())
        if shift>26:
            shift = shift%26
        if shift<0:
            shift = shift%26

        ciphertext = str(entry_4.get())
        decrypted_text_morse = morse_to_text(ciphertext)
        decrypted_text = caesar_decrypt(decrypted_text_morse, shift)
        morse = decrypted_text
        canvas.itemconfig(tagOrId=result, text=morse)

    elif v:
        key = str(entry_3.get())
        ciphertext = str(entry_4.get())
        if len(key) == 0:
            while len(key)<len(ciphertext):
                key += key
        if len(key) > len(ciphertext):
            key = key[:len(ciphertext)]
        if key.isnumeric():
            canvas.itemconfig(tagOrId=result, text="Invalid key")
            return
        decrypted_text_morse = morse_to_text(ciphertext)
        decrypted_text = vigenere_decrypt(decrypted_text_morse, key)
        morse = decrypted_text
        canvas.itemconfig(tagOrId=result, text=morse)
    elif d:
        
        key = str(entry_3.get())
        if len(key)!=8:
            canvas.itemconfig(tagOrId=result, text="Please insert a correct key")
            return
        ciphertext = str(entry_4.get())
        decrypted_text_morse = morse_to_text(ciphertext)
        decrypted_text = des_decrypt(decrypted_text_morse, key)
        morse = decrypted_text
        canvas.itemconfig(tagOrId=result, text=morse)
    elif a:
        try:
            key = str(entry_3.get())
            if len(key)!=16 and len(key)!=24 and len(key)!=32:
                canvas.itemconfig(tagOrId=result, text="Please insert a 16/24/32 character key")
                return
            ciphertext = str(entry_4.get())
            decrypted_text_morse = morse_to_text(ciphertext)
            decrypted_text = aes_decrypt(decrypted_text_morse, key)
            morse = decrypted_text
            canvas.itemconfig(tagOrId=result, text=morse)
        except:
            canvas.itemconfig(tagOrId=result, text="Wrong key")

def copy():
    result_text = canvas.itemcget(result, "text")
    pyperclip.copy(result_text)

c = False
v = False
d = False
a = False

def caesar():
    global c,v,d,a
    if(v==False and d==False and a==False):
        c = True  

def vigenere():
    global c,v,d,a
    if(c==False and d==False and a==False):
        v = True

def aes():
    global c,v,d,a
    if(c==False and v==False and d==False):
        a = True

def des():
    global c,v,d,a
    if(c==False and v==False and a==False):
        d = True

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 430,
    width = 1376,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=448.0,
    y=215.0,
    width=32.0,
    height=79.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=448.0,
    y=8.0,
    width=32.0,
    height=79.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=-8.0,
    y=212.0,
    width=56.0,
    height=96.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
    
)
button_4.place(
    x=-8.0,
    y=8.0,
    width=56.0,
    height=96.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: aes(),
    relief="flat"
)
button_6.place(
    x=845.0,
    y=52.0,
    width=62.0,
    height=33.0
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: caesar(),
    relief="flat"
)
button_7.place(
    x=496.0,
    y=52.0,
    width=117.0,
    height=33.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: vigenere(),
    relief="flat"
)
button_8.place(
    x=625.0,
    y=52.0,
    width=122.0,
    height=33.0
)

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: des(),
    relief="flat"
)
button_9.place(
    x=765.0,
    y=52.0,
    width=62.0,
    height=33.0
)

canvas.create_text(
    494.0,
    12.0,
    anchor="nw",
    text="ALGORITHMS",
    fill="#FF9900",
    font=("Roboto", 24 * -1)
)

canvas.create_text(
    501.0,
    123.0,
    anchor="nw",
    text="KEY/SHIFT",
    fill="#90999E",
    font=("Roboto", 12 * -1)
)

canvas.create_text(
    941.0,
    16.0,
    anchor="nw",
    text="OUTPUT",
    fill="#00B1D1",
    font=("Roboto", 15 * -1)
)

canvas.create_text(
    941.0,
    52.0,
    anchor="nw",
    text="Morse Code / Plain Text",
    fill="#00B1D1",
    font=("Roboto", 24 * -1)
)

canvas.create_text(
    54.0,
    222.0,
    anchor="nw",
    text="DECRYPTION",
    fill="#00B1D1",
    font=("Roboto", 15 * -1)
)

canvas.create_text(
    54.0,
    16.0,
    anchor="nw",
    text="ENCRYPTION",
    fill="#00B1D1",
    font=("Roboto", 15 * -1)
)

canvas.create_text(
    51.0,
    58.0,
    anchor="nw",
    text="ENTER YOUR MESSAGE",
    fill="#00B1D1",
    font=("Roboto", 24 * -1)
)

canvas.create_text(
    51.0,
    264.0,
    anchor="nw",
    text="ENTER MORSE CODE",
    fill="#00B1D1",
    font=("Roboto", 24 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    244.0,
    158.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=54.0,
    y=131.0,
    width=380.0,
    height=53.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    704.0,
    176.5,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=501.0,
    y=149.0,
    width=406.0,
    height=53.0
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    244.0,
    366.5,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=54.0,
    y=339.0,
    width=380.0,
    height=53.0
)

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
button_10 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: encrypt_handler(),
    relief="flat"
)
button_10.place(
    x=501.0,
    y=221.0,
    width=153.0,
    height=33.0
)

button_image_11 = PhotoImage(
    file=relative_to_assets("copy_button.png"))
button_11 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: copy(),
    relief="flat"
)
button_11.place(
    x=941.0,
    y=290.0,
    width=163.0,
    height=33.0
)

button_image_12 = PhotoImage(
    file=relative_to_assets("button_12.png"))
button_12 = Button(
    image=button_image_12,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: decrypt_handler(),
    relief="flat"
)
button_12.place(
    x=501.0,
    y=258.0,
    width=153.0,
    height=33.0
)

rectangle = canvas.create_rectangle(941, 140, 941 + 336.83, 160 + 100, fill="#D9D9D9")
result = canvas.create_text(
    941.0,
    140.0,
    text="",
    fill="#000000",
    anchor="nw",
    font=("Roboto", 24 * -1),
    width=336  
)

def reset_handler():
    global morse, c, v, d, a
    morse = ""
    c = False
    v = False
    d = False
    a = False
    entry_2.delete(0, 'end')
    entry_3.delete(0, 'end')
    entry_4.delete(0, 'end')
    canvas.itemconfig(tagOrId=result, text="")

button_image_reset = PhotoImage(
    file=relative_to_assets("reset_button.png"))
button_reset = Button(
    image=button_image_reset,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: reset_handler(),
    relief="flat"
)
button_reset.place(
    x=941.0,
    y=325.0,
    width=163.0,
    height=33.0
)


window.resizable(True, True)
window.mainloop()



